import os
import shutil

def divide_files(file_list):
    mid_index = len(file_list) // 2
    return file_list[:mid_index], file_list[mid_index:]

def move_files(files, destination):
    for file in files:
        try:
            shutil.move(file, destination)
            print(f"Moved {os.path.basename(file)} to {destination}")
        except Exception as e:
            print(f"Error moving {file}: {e}")

def prompt_for_test_result(group_name):
    while True:
        result = input(f"Did {group_name} cause an error? (yes/no): ").lower()
        if result in ['yes', 'no']:
            return result == 'yes'
        else:
            print("Please respond with 'yes' or 'no'.")

def binary_search_debug(file_list, active_dir, excluded_dir):
    groups = [(file_list, "Initial Group")]

    while groups:
        current_group, group_name = groups.pop()

        if len(current_group) == 1:
            print(f"The problematic file is: {current_group[0]}")
            return

        first_half, second_half = divide_files(current_group)

        move_files(first_half, active_dir)
        if prompt_for_test_result(f"{group_name} (First Half)"):
            move_files(second_half, excluded_dir)
            groups.append((first_half, f"{group_name} (First Half)"))
        else:
            move_files(first_half, excluded_dir)
            move_files(second_half, active_dir)
            groups.append((second_half, f"{group_name} (Second Half)"))

def get_files_in_directory(directory):
    return [os.path.join(directory, file) for file in os.listdir(directory) if os.path.isfile(os.path.join(directory, file))]

if __name__ == "__main__":
    active_dir = input("Enter the directory path for active testing: ")
    excluded_dir = input("Enter the directory path for excluded files: ")

    os.makedirs(active_dir, exist_ok=True)
    os.makedirs(excluded_dir, exist_ok=True)

    file_list = get_files_in_directory(excluded_dir)

    if not file_list:
        print("No files found in the excluded directory.")
    else:
        print(f"Found {len(file_list)} files in the excluded directory.")
        binary_search_debug(file_list, active_dir, excluded_dir)
